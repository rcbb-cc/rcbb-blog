(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{353:function(t,s,a){"use strict";a.r(s);var r=a(1),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"工厂模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[t._v("#")]),t._v(" 工厂模式")]),t._v(" "),s("ul",[s("li",[t._v("简单工厂(simple factory)")]),t._v(" "),s("li",[t._v("工厂方法(factory method)")]),t._v(" "),s("li",[t._v("抽象工厂(abstract factory)")])]),t._v(" "),s("h2",{attrs:{id:"简单工厂-simple-factory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂-simple-factory"}},[t._v("#")]),t._v(" 简单工厂(simple factory)")]),t._v(" "),s("p",[t._v("场景问题：面向接口编程，客户端 New 一个实例，必须要知道具体实现类。")]),t._v(" "),s("p",[t._v("模版定义：提供一个创建对象实例的功能，而无须关系其具体实现。被创建实例的类型可以是接口、抽象类，也可以是具体的类。")]),t._v(" "),s("p",[t._v("模式本质：重点在选择实现，使客户端实现解耦。")]),t._v(" "),s("p",[t._v("使用场景：")]),t._v(" "),s("ul",[s("li",[t._v("如果想要完全封装隔离具体实现，让外部只能通过接口来操作封装体。")]),t._v(" "),s("li",[t._v("如果想要把对外创建对象的职责集中管理和控制。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/a9f397c4ff98",target:"_blank",rel:"noopener noreferrer"}},[t._v("七寸知架构-【创建型模式一】简单工厂(Simple Factory)"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("img",{attrs:{src:"https://rcbb-blog.oss-cn-guangzhou.aliyuncs.com/2022/08/20220811154325-714663.png?x-oss-process=style/yuantu_shuiyin",alt:"简单工厂-example1"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://rcbb-blog.oss-cn-guangzhou.aliyuncs.com/2022/08/20220811113411-fe104d.png?x-oss-process=style/yuantu_shuiyin",alt:"简单工厂-example2"}})]),t._v(" "),s("h2",{attrs:{id:"工厂方法-factory-method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法-factory-method"}},[t._v("#")]),t._v(" 工厂方法(factory method)")]),t._v(" "),s("p",[t._v("场景问题：简单数据导出功能，会有一些约定方式，比如导出成：文本格式、Excel 格式、Xml 格式、Json 格式等。")]),t._v(" "),s("p",[t._v("模版定义：提供一个用于创建对象的接口，让子类决定实例化哪一个类，使一个类的实例化延迟到其子类。")]),t._v(" "),s("p",[t._v("模式本质：让父类在不知道具体实现的情况下，完成自身的功能调用，而具体的实现延迟到子类来实现。")]),t._v(" "),s("p",[t._v("使用场景：")]),t._v(" "),s("ul",[s("li",[t._v("如果一个类需要创建某个接口的对象，但是又不知道具体的实现。")]),t._v(" "),s("li",[t._v("如果一个类本身就希望由它的子类来创建所需的对象的时候。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/f1960652b64b",target:"_blank",rel:"noopener noreferrer"}},[t._v("七寸知架构-【创建型模式二】工厂方法(Factory Method)"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("img",{attrs:{src:"https://rcbb-blog.oss-cn-guangzhou.aliyuncs.com/2022/08/20220812165834-f0fb15.png?x-oss-process=style/yuantu_shuiyin",alt:"工厂方法-example1"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://rcbb-blog.oss-cn-guangzhou.aliyuncs.com/2022/08/20220812170149-1bb126.png?x-oss-process=style/yuantu_shuiyin",alt:"工厂方法-example2"}})]),t._v(" "),s("h2",{attrs:{id:"抽象工厂-abstract-factory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂-abstract-factory"}},[t._v("#")]),t._v(" 抽象工厂(abstract factory)")]),t._v(" "),s("p",[t._v("场景问题：选择组装电脑配机，组装配件是有整体性的，里面选择的各个配件之间是有关联的。")]),t._v(" "),s("p",[t._v("模式定义：提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。")]),t._v(" "),s("p",[t._v("模式本质：选择产品簇的实现。")]),t._v(" "),s("p",[t._v("使用场景：")]),t._v(" "),s("ul",[s("li",[t._v("如果希望一个系统独立于它的产品的创建，组合和表示的时候。")]),t._v(" "),s("li",[t._v("如果要强调一系列相关产品的接口，以便联合使用它们的时候。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/e873855e88a0",target:"_blank",rel:"noopener noreferrer"}},[t._v("七寸知架构-【创建型模式三】抽象工厂(Abstract Factory)"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("img",{attrs:{src:"https://rcbb-blog.oss-cn-guangzhou.aliyuncs.com/2022/08/20220819162733-fcb3d7.png?x-oss-process=style/yuantu_shuiyin",alt:"抽象工厂-example1"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://rcbb-blog.oss-cn-guangzhou.aliyuncs.com/2022/08/20220819162036-794e7d.png?x-oss-process=style/yuantu_shuiyin",alt:"抽象工厂-example2"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);